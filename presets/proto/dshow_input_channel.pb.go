// Generate proto code by running the following from the parent directory:
// $ protoc --go_out=. proto/*.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: proto/dshow_input_channel.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DShowInputChannelEqType int32

const (
	DShowInputChannel_EQ_SHELF DShowInputChannelEqType = 0
	DShowInputChannel_EQ_CURVE DShowInputChannelEqType = 1
)

// Enum value maps for DShowInputChannelEqType.
var (
	DShowInputChannelEqType_name = map[int32]string{
		0: "EQ_SHELF",
		1: "EQ_CURVE",
	}
	DShowInputChannelEqType_value = map[string]int32{
		"EQ_SHELF": 0,
		"EQ_CURVE": 1,
	}
)

func (x DShowInputChannelEqType) Enum() *DShowInputChannelEqType {
	p := new(DShowInputChannelEqType)
	*p = x
	return p
}

func (x DShowInputChannelEqType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DShowInputChannelEqType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dshow_input_channel_proto_enumTypes[0].Descriptor()
}

func (DShowInputChannelEqType) Type() protoreflect.EnumType {
	return &file_proto_dshow_input_channel_proto_enumTypes[0]
}

func (x DShowInputChannelEqType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DShowInputChannelEqType.Descriptor instead.
func (DShowInputChannelEqType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 0}
}

type DShowInputChannelEqDyn int32

const (
	DShowInputChannel_EQ_PRE_DYN  DShowInputChannelEqDyn = 0
	DShowInputChannel_EQ_POST_DYN DShowInputChannelEqDyn = 1
)

// Enum value maps for DShowInputChannelEqDyn.
var (
	DShowInputChannelEqDyn_name = map[int32]string{
		0: "EQ_PRE_DYN",
		1: "EQ_POST_DYN",
	}
	DShowInputChannelEqDyn_value = map[string]int32{
		"EQ_PRE_DYN":  0,
		"EQ_POST_DYN": 1,
	}
)

func (x DShowInputChannelEqDyn) Enum() *DShowInputChannelEqDyn {
	p := new(DShowInputChannelEqDyn)
	*p = x
	return p
}

func (x DShowInputChannelEqDyn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DShowInputChannelEqDyn) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dshow_input_channel_proto_enumTypes[1].Descriptor()
}

func (DShowInputChannelEqDyn) Type() protoreflect.EnumType {
	return &file_proto_dshow_input_channel_proto_enumTypes[1]
}

func (x DShowInputChannelEqDyn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DShowInputChannelEqDyn.Descriptor instead.
func (DShowInputChannelEqDyn) EnumDescriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 1}
}

type DShowInputChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *DShowInputChannel_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Body   *DShowInputChannel_Body   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *DShowInputChannel) Reset() {
	*x = DShowInputChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dshow_input_channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DShowInputChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DShowInputChannel) ProtoMessage() {}

func (x *DShowInputChannel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dshow_input_channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DShowInputChannel.ProtoReflect.Descriptor instead.
func (*DShowInputChannel) Descriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0}
}

func (x *DShowInputChannel) GetHeader() *DShowInputChannel_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DShowInputChannel) GetBody() *DShowInputChannel_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

type DShowInputChannel_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`            // Digidesign Storage - 1.0
	TokenCount int32  `protobuf:"varint,2,opt,name=tokenCount,proto3" json:"tokenCount,omitempty"` // 3
	// 1.0
	Version     int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	FileType    string `protobuf:"bytes,4,opt,name=fileType,proto3" json:"fileType,omitempty"`
	UserComment string `protobuf:"bytes,5,opt,name=userComment,proto3" json:"userComment,omitempty"`
}

func (x *DShowInputChannel_Header) Reset() {
	*x = DShowInputChannel_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dshow_input_channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DShowInputChannel_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DShowInputChannel_Header) ProtoMessage() {}

func (x *DShowInputChannel_Header) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dshow_input_channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DShowInputChannel_Header.ProtoReflect.Descriptor instead.
func (*DShowInputChannel_Header) Descriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DShowInputChannel_Header) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DShowInputChannel_Header) GetTokenCount() int32 {
	if x != nil {
		return x.TokenCount
	}
	return 0
}

func (x *DShowInputChannel_Header) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DShowInputChannel_Header) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *DShowInputChannel_Header) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

type DShowInputChannel_AudioMasterStrip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DShowInputChannel_AudioMasterStrip) Reset() {
	*x = DShowInputChannel_AudioMasterStrip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dshow_input_channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DShowInputChannel_AudioMasterStrip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DShowInputChannel_AudioMasterStrip) ProtoMessage() {}

func (x *DShowInputChannel_AudioMasterStrip) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dshow_input_channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DShowInputChannel_AudioMasterStrip.ProtoReflect.Descriptor instead.
func (*DShowInputChannel_AudioMasterStrip) Descriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 1}
}

type DShowInputChannel_AudioStrip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseIn     bool    `protobuf:"varint,1,opt,name=phaseIn,proto3" json:"phaseIn,omitempty"`
	DelayIn     bool    `protobuf:"varint,2,opt,name=delayIn,proto3" json:"delayIn,omitempty"`
	Delay       float32 `protobuf:"fixed32,3,opt,name=delay,proto3" json:"delay,omitempty"`
	DirectOutIn bool    `protobuf:"varint,4,opt,name=directOutIn,proto3" json:"directOutIn,omitempty"`
	DirectOut   float32 `protobuf:"fixed32,5,opt,name=directOut,proto3" json:"directOut,omitempty"`
	Pan         int32   `protobuf:"varint,6,opt,name=pan,proto3" json:"pan,omitempty"`
	LeftRight   bool    `protobuf:"varint,7,opt,name=leftRight,proto3" json:"leftRight,omitempty"`
	CenterMono  bool    `protobuf:"varint,8,opt,name=centerMono,proto3" json:"centerMono,omitempty"`
}

func (x *DShowInputChannel_AudioStrip) Reset() {
	*x = DShowInputChannel_AudioStrip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dshow_input_channel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DShowInputChannel_AudioStrip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DShowInputChannel_AudioStrip) ProtoMessage() {}

func (x *DShowInputChannel_AudioStrip) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dshow_input_channel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DShowInputChannel_AudioStrip.ProtoReflect.Descriptor instead.
func (*DShowInputChannel_AudioStrip) Descriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 2}
}

func (x *DShowInputChannel_AudioStrip) GetPhaseIn() bool {
	if x != nil {
		return x.PhaseIn
	}
	return false
}

func (x *DShowInputChannel_AudioStrip) GetDelayIn() bool {
	if x != nil {
		return x.DelayIn
	}
	return false
}

func (x *DShowInputChannel_AudioStrip) GetDelay() float32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *DShowInputChannel_AudioStrip) GetDirectOutIn() bool {
	if x != nil {
		return x.DirectOutIn
	}
	return false
}

func (x *DShowInputChannel_AudioStrip) GetDirectOut() float32 {
	if x != nil {
		return x.DirectOut
	}
	return 0
}

func (x *DShowInputChannel_AudioStrip) GetPan() int32 {
	if x != nil {
		return x.Pan
	}
	return 0
}

func (x *DShowInputChannel_AudioStrip) GetLeftRight() bool {
	if x != nil {
		return x.LeftRight
	}
	return false
}

func (x *DShowInputChannel_AudioStrip) GetCenterMono() bool {
	if x != nil {
		return x.CenterMono
	}
	return false
}

type DShowInputChannel_AuxBussesOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DShowInputChannel_AuxBussesOptions) Reset() {
	*x = DShowInputChannel_AuxBussesOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dshow_input_channel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DShowInputChannel_AuxBussesOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DShowInputChannel_AuxBussesOptions) ProtoMessage() {}

func (x *DShowInputChannel_AuxBussesOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dshow_input_channel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DShowInputChannel_AuxBussesOptions.ProtoReflect.Descriptor instead.
func (*DShowInputChannel_AuxBussesOptions) Descriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 3}
}

type DShowInputChannel_AuxBussesOptions2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DShowInputChannel_AuxBussesOptions2) Reset() {
	*x = DShowInputChannel_AuxBussesOptions2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dshow_input_channel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DShowInputChannel_AuxBussesOptions2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DShowInputChannel_AuxBussesOptions2) ProtoMessage() {}

func (x *DShowInputChannel_AuxBussesOptions2) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dshow_input_channel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DShowInputChannel_AuxBussesOptions2.ProtoReflect.Descriptor instead.
func (*DShowInputChannel_AuxBussesOptions2) Descriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 4}
}

type DShowInputChannel_BusConfigMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DShowInputChannel_BusConfigMode) Reset() {
	*x = DShowInputChannel_BusConfigMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dshow_input_channel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DShowInputChannel_BusConfigMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DShowInputChannel_BusConfigMode) ProtoMessage() {}

func (x *DShowInputChannel_BusConfigMode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dshow_input_channel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DShowInputChannel_BusConfigMode.ProtoReflect.Descriptor instead.
func (*DShowInputChannel_BusConfigMode) Descriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 5}
}

type DShowInputChannel_InputStrip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patched     bool    `protobuf:"varint,1,opt,name=patched,proto3" json:"patched,omitempty"` // true if channel is patched
	Phantom     bool    `protobuf:"varint,2,opt,name=phantom,proto3" json:"phantom,omitempty"` // true if phantom is enabled
	Pad         bool    `protobuf:"varint,3,opt,name=pad,proto3" json:"pad,omitempty"`         // true if pad is enabled
	Gain        float32 `protobuf:"fixed32,4,opt,name=gain,proto3" json:"gain,omitempty"`
	InputDirect bool    `protobuf:"varint,5,opt,name=inputDirect,proto3" json:"inputDirect,omitempty"`
	// EQ
	EqIn          bool                    `protobuf:"varint,6,opt,name=eqIn,proto3" json:"eqIn,omitempty"`
	AnalogEq      bool                    `protobuf:"varint,7,opt,name=analogEq,proto3" json:"analogEq,omitempty"`
	EqHighIn      bool                    `protobuf:"varint,8,opt,name=eqHighIn,proto3" json:"eqHighIn,omitempty"`
	EqHighType    DShowInputChannelEqType `protobuf:"varint,9,opt,name=eqHighType,proto3,enum=proto.DShowInputChannelEqType" json:"eqHighType,omitempty"`
	EqHighGain    float32                 `protobuf:"fixed32,10,opt,name=eqHighGain,proto3" json:"eqHighGain,omitempty"`
	EqHighFreq    int32                   `protobuf:"varint,11,opt,name=eqHighFreq,proto3" json:"eqHighFreq,omitempty"`
	EqHighQBw     float32                 `protobuf:"fixed32,12,opt,name=eqHighQBw,proto3" json:"eqHighQBw,omitempty"`
	EqHighMidIn   bool                    `protobuf:"varint,13,opt,name=eqHighMidIn,proto3" json:"eqHighMidIn,omitempty"`
	EqHighMidType DShowInputChannelEqType `protobuf:"varint,14,opt,name=eqHighMidType,proto3,enum=proto.DShowInputChannelEqType" json:"eqHighMidType,omitempty"`
	EqHighMidGain float32                 `protobuf:"fixed32,15,opt,name=eqHighMidGain,proto3" json:"eqHighMidGain,omitempty"`
	EqHighMidFreq int32                   `protobuf:"varint,16,opt,name=eqHighMidFreq,proto3" json:"eqHighMidFreq,omitempty"`
	EqHighMidQBw  float32                 `protobuf:"fixed32,17,opt,name=eqHighMidQBw,proto3" json:"eqHighMidQBw,omitempty"`
	EqLowMidIn    bool                    `protobuf:"varint,18,opt,name=eqLowMidIn,proto3" json:"eqLowMidIn,omitempty"`
	EqLowMidType  DShowInputChannelEqType `protobuf:"varint,19,opt,name=eqLowMidType,proto3,enum=proto.DShowInputChannelEqType" json:"eqLowMidType,omitempty"`
	EqLowMidGain  float32                 `protobuf:"fixed32,20,opt,name=eqLowMidGain,proto3" json:"eqLowMidGain,omitempty"`
	EqLowMidFreq  int32                   `protobuf:"varint,21,opt,name=eqLowMidFreq,proto3" json:"eqLowMidFreq,omitempty"`
	EqLowMidQBw   float32                 `protobuf:"fixed32,22,opt,name=eqLowMidQBw,proto3" json:"eqLowMidQBw,omitempty"`
	EqLowIn       bool                    `protobuf:"varint,23,opt,name=eqLowIn,proto3" json:"eqLowIn,omitempty"`
	EqLowType     DShowInputChannelEqType `protobuf:"varint,24,opt,name=eqLowType,proto3,enum=proto.DShowInputChannelEqType" json:"eqLowType,omitempty"`
	EqLowGain     float32                 `protobuf:"fixed32,25,opt,name=eqLowGain,proto3" json:"eqLowGain,omitempty"`
	EqLowFreq     int32                   `protobuf:"varint,26,opt,name=eqLowFreq,proto3" json:"eqLowFreq,omitempty"`
	EqLowQBw      float32                 `protobuf:"fixed32,27,opt,name=eqLowQBw,proto3" json:"eqLowQBw,omitempty"` // end EQ
	Bus1          bool                    `protobuf:"varint,28,opt,name=bus1,proto3" json:"bus1,omitempty"`
	Bus2          bool                    `protobuf:"varint,29,opt,name=bus2,proto3" json:"bus2,omitempty"`
	Bus3          bool                    `protobuf:"varint,30,opt,name=bus3,proto3" json:"bus3,omitempty"`
	Bus4          bool                    `protobuf:"varint,31,opt,name=bus4,proto3" json:"bus4,omitempty"`
	Bus5          bool                    `protobuf:"varint,32,opt,name=bus5,proto3" json:"bus5,omitempty"`
	Bus6          bool                    `protobuf:"varint,33,opt,name=bus6,proto3" json:"bus6,omitempty"`
	Bus7          bool                    `protobuf:"varint,34,opt,name=bus7,proto3" json:"bus7,omitempty"`
	Bus8          bool                    `protobuf:"varint,35,opt,name=bus8,proto3" json:"bus8,omitempty"`
	Aux1In        bool                    `protobuf:"varint,40,opt,name=aux1In,proto3" json:"aux1In,omitempty"`
	Aux1Pre       bool                    `protobuf:"varint,41,opt,name=aux1Pre,proto3" json:"aux1Pre,omitempty"`
	Aux1Level     float32                 `protobuf:"fixed32,42,opt,name=aux1Level,proto3" json:"aux1Level,omitempty"`
	Aux2In        bool                    `protobuf:"varint,43,opt,name=aux2In,proto3" json:"aux2In,omitempty"`
	Aux2Pre       bool                    `protobuf:"varint,44,opt,name=aux2Pre,proto3" json:"aux2Pre,omitempty"`
	Aux2Level     float32                 `protobuf:"fixed32,45,opt,name=aux2Level,proto3" json:"aux2Level,omitempty"`
	Aux1Pan       int32                   `protobuf:"varint,46,opt,name=aux1Pan,proto3" json:"aux1Pan,omitempty"`
	Aux3In        bool                    `protobuf:"varint,47,opt,name=aux3In,proto3" json:"aux3In,omitempty"`
	Aux3Pre       bool                    `protobuf:"varint,48,opt,name=aux3Pre,proto3" json:"aux3Pre,omitempty"`
	Aux3Level     float32                 `protobuf:"fixed32,49,opt,name=aux3Level,proto3" json:"aux3Level,omitempty"`
	Aux4In        bool                    `protobuf:"varint,50,opt,name=aux4In,proto3" json:"aux4In,omitempty"`
	Aux4Pre       bool                    `protobuf:"varint,51,opt,name=aux4Pre,proto3" json:"aux4Pre,omitempty"`
	Aux4Level     float32                 `protobuf:"fixed32,52,opt,name=aux4Level,proto3" json:"aux4Level,omitempty"`
	Aux3Pan       int32                   `protobuf:"varint,53,opt,name=aux3Pan,proto3" json:"aux3Pan,omitempty"`
	Aux5In        bool                    `protobuf:"varint,54,opt,name=aux5In,proto3" json:"aux5In,omitempty"`
	Aux5Pre       bool                    `protobuf:"varint,55,opt,name=aux5Pre,proto3" json:"aux5Pre,omitempty"`
	Aux5Level     float32                 `protobuf:"fixed32,56,opt,name=aux5Level,proto3" json:"aux5Level,omitempty"`
	Aux6In        bool                    `protobuf:"varint,57,opt,name=aux6In,proto3" json:"aux6In,omitempty"`
	Aux6Pre       bool                    `protobuf:"varint,58,opt,name=aux6Pre,proto3" json:"aux6Pre,omitempty"`
	Aux6Level     float32                 `protobuf:"fixed32,59,opt,name=aux6Level,proto3" json:"aux6Level,omitempty"`
	Aux5Pan       int32                   `protobuf:"varint,60,opt,name=aux5Pan,proto3" json:"aux5Pan,omitempty"`
	Aux7In        bool                    `protobuf:"varint,61,opt,name=aux7In,proto3" json:"aux7In,omitempty"`
	Aux7Pre       bool                    `protobuf:"varint,62,opt,name=aux7Pre,proto3" json:"aux7Pre,omitempty"`
	Aux7Level     float32                 `protobuf:"fixed32,63,opt,name=aux7Level,proto3" json:"aux7Level,omitempty"`
	Aux8In        bool                    `protobuf:"varint,64,opt,name=aux8In,proto3" json:"aux8In,omitempty"`
	Aux8Pre       bool                    `protobuf:"varint,65,opt,name=aux8Pre,proto3" json:"aux8Pre,omitempty"`
	Aux8Level     float32                 `protobuf:"fixed32,66,opt,name=aux8Level,proto3" json:"aux8Level,omitempty"`
	Aux7Pan       int32                   `protobuf:"varint,67,opt,name=aux7Pan,proto3" json:"aux7Pan,omitempty"`
	Aux9In        bool                    `protobuf:"varint,68,opt,name=aux9In,proto3" json:"aux9In,omitempty"`
	Aux9Pre       bool                    `protobuf:"varint,69,opt,name=aux9Pre,proto3" json:"aux9Pre,omitempty"`
	Aux9Level     float32                 `protobuf:"fixed32,70,opt,name=aux9Level,proto3" json:"aux9Level,omitempty"`
	Aux10In       bool                    `protobuf:"varint,71,opt,name=aux10In,proto3" json:"aux10In,omitempty"`
	Aux10Pre      bool                    `protobuf:"varint,72,opt,name=aux10Pre,proto3" json:"aux10Pre,omitempty"`
	Aux10Level    float32                 `protobuf:"fixed32,73,opt,name=aux10Level,proto3" json:"aux10Level,omitempty"`
	Aux9Pan       int32                   `protobuf:"varint,74,opt,name=aux9Pan,proto3" json:"aux9Pan,omitempty"`
	Aux11In       bool                    `protobuf:"varint,75,opt,name=aux11In,proto3" json:"aux11In,omitempty"`
	Aux11Pre      bool                    `protobuf:"varint,76,opt,name=aux11Pre,proto3" json:"aux11Pre,omitempty"`
	Aux11Level    float32                 `protobuf:"fixed32,77,opt,name=aux11Level,proto3" json:"aux11Level,omitempty"`
	Aux12In       bool                    `protobuf:"varint,78,opt,name=aux12In,proto3" json:"aux12In,omitempty"`
	Aux12Pre      bool                    `protobuf:"varint,79,opt,name=aux12Pre,proto3" json:"aux12Pre,omitempty"`
	Aux12Level    float32                 `protobuf:"fixed32,80,opt,name=aux12Level,proto3" json:"aux12Level,omitempty"`
	Aux11Pan      int32                   `protobuf:"varint,81,opt,name=aux11Pan,proto3" json:"aux11Pan,omitempty"`
	HeatIn        bool                    `protobuf:"varint,136,opt,name=heatIn,proto3" json:"heatIn,omitempty"`
	Drive         int32                   `protobuf:"varint,137,opt,name=drive,proto3" json:"drive,omitempty"`
	Tone          int32                   `protobuf:"varint,138,opt,name=tone,proto3" json:"tone,omitempty"`
}

func (x *DShowInputChannel_InputStrip) Reset() {
	*x = DShowInputChannel_InputStrip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dshow_input_channel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DShowInputChannel_InputStrip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DShowInputChannel_InputStrip) ProtoMessage() {}

func (x *DShowInputChannel_InputStrip) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dshow_input_channel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DShowInputChannel_InputStrip.ProtoReflect.Descriptor instead.
func (*DShowInputChannel_InputStrip) Descriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 6}
}

func (x *DShowInputChannel_InputStrip) GetPatched() bool {
	if x != nil {
		return x.Patched
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetPhantom() bool {
	if x != nil {
		return x.Phantom
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetPad() bool {
	if x != nil {
		return x.Pad
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetGain() float32 {
	if x != nil {
		return x.Gain
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetInputDirect() bool {
	if x != nil {
		return x.InputDirect
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetEqIn() bool {
	if x != nil {
		return x.EqIn
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAnalogEq() bool {
	if x != nil {
		return x.AnalogEq
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetEqHighIn() bool {
	if x != nil {
		return x.EqHighIn
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetEqHighType() DShowInputChannelEqType {
	if x != nil {
		return x.EqHighType
	}
	return DShowInputChannel_EQ_SHELF
}

func (x *DShowInputChannel_InputStrip) GetEqHighGain() float32 {
	if x != nil {
		return x.EqHighGain
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetEqHighFreq() int32 {
	if x != nil {
		return x.EqHighFreq
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetEqHighQBw() float32 {
	if x != nil {
		return x.EqHighQBw
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetEqHighMidIn() bool {
	if x != nil {
		return x.EqHighMidIn
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetEqHighMidType() DShowInputChannelEqType {
	if x != nil {
		return x.EqHighMidType
	}
	return DShowInputChannel_EQ_SHELF
}

func (x *DShowInputChannel_InputStrip) GetEqHighMidGain() float32 {
	if x != nil {
		return x.EqHighMidGain
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetEqHighMidFreq() int32 {
	if x != nil {
		return x.EqHighMidFreq
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetEqHighMidQBw() float32 {
	if x != nil {
		return x.EqHighMidQBw
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetEqLowMidIn() bool {
	if x != nil {
		return x.EqLowMidIn
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetEqLowMidType() DShowInputChannelEqType {
	if x != nil {
		return x.EqLowMidType
	}
	return DShowInputChannel_EQ_SHELF
}

func (x *DShowInputChannel_InputStrip) GetEqLowMidGain() float32 {
	if x != nil {
		return x.EqLowMidGain
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetEqLowMidFreq() int32 {
	if x != nil {
		return x.EqLowMidFreq
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetEqLowMidQBw() float32 {
	if x != nil {
		return x.EqLowMidQBw
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetEqLowIn() bool {
	if x != nil {
		return x.EqLowIn
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetEqLowType() DShowInputChannelEqType {
	if x != nil {
		return x.EqLowType
	}
	return DShowInputChannel_EQ_SHELF
}

func (x *DShowInputChannel_InputStrip) GetEqLowGain() float32 {
	if x != nil {
		return x.EqLowGain
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetEqLowFreq() int32 {
	if x != nil {
		return x.EqLowFreq
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetEqLowQBw() float32 {
	if x != nil {
		return x.EqLowQBw
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetBus1() bool {
	if x != nil {
		return x.Bus1
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetBus2() bool {
	if x != nil {
		return x.Bus2
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetBus3() bool {
	if x != nil {
		return x.Bus3
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetBus4() bool {
	if x != nil {
		return x.Bus4
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetBus5() bool {
	if x != nil {
		return x.Bus5
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetBus6() bool {
	if x != nil {
		return x.Bus6
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetBus7() bool {
	if x != nil {
		return x.Bus7
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetBus8() bool {
	if x != nil {
		return x.Bus8
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux1In() bool {
	if x != nil {
		return x.Aux1In
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux1Pre() bool {
	if x != nil {
		return x.Aux1Pre
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux1Level() float32 {
	if x != nil {
		return x.Aux1Level
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux2In() bool {
	if x != nil {
		return x.Aux2In
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux2Pre() bool {
	if x != nil {
		return x.Aux2Pre
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux2Level() float32 {
	if x != nil {
		return x.Aux2Level
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux1Pan() int32 {
	if x != nil {
		return x.Aux1Pan
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux3In() bool {
	if x != nil {
		return x.Aux3In
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux3Pre() bool {
	if x != nil {
		return x.Aux3Pre
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux3Level() float32 {
	if x != nil {
		return x.Aux3Level
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux4In() bool {
	if x != nil {
		return x.Aux4In
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux4Pre() bool {
	if x != nil {
		return x.Aux4Pre
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux4Level() float32 {
	if x != nil {
		return x.Aux4Level
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux3Pan() int32 {
	if x != nil {
		return x.Aux3Pan
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux5In() bool {
	if x != nil {
		return x.Aux5In
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux5Pre() bool {
	if x != nil {
		return x.Aux5Pre
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux5Level() float32 {
	if x != nil {
		return x.Aux5Level
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux6In() bool {
	if x != nil {
		return x.Aux6In
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux6Pre() bool {
	if x != nil {
		return x.Aux6Pre
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux6Level() float32 {
	if x != nil {
		return x.Aux6Level
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux5Pan() int32 {
	if x != nil {
		return x.Aux5Pan
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux7In() bool {
	if x != nil {
		return x.Aux7In
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux7Pre() bool {
	if x != nil {
		return x.Aux7Pre
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux7Level() float32 {
	if x != nil {
		return x.Aux7Level
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux8In() bool {
	if x != nil {
		return x.Aux8In
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux8Pre() bool {
	if x != nil {
		return x.Aux8Pre
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux8Level() float32 {
	if x != nil {
		return x.Aux8Level
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux7Pan() int32 {
	if x != nil {
		return x.Aux7Pan
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux9In() bool {
	if x != nil {
		return x.Aux9In
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux9Pre() bool {
	if x != nil {
		return x.Aux9Pre
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux9Level() float32 {
	if x != nil {
		return x.Aux9Level
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux10In() bool {
	if x != nil {
		return x.Aux10In
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux10Pre() bool {
	if x != nil {
		return x.Aux10Pre
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux10Level() float32 {
	if x != nil {
		return x.Aux10Level
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux9Pan() int32 {
	if x != nil {
		return x.Aux9Pan
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux11In() bool {
	if x != nil {
		return x.Aux11In
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux11Pre() bool {
	if x != nil {
		return x.Aux11Pre
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux11Level() float32 {
	if x != nil {
		return x.Aux11Level
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux12In() bool {
	if x != nil {
		return x.Aux12In
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux12Pre() bool {
	if x != nil {
		return x.Aux12Pre
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetAux12Level() float32 {
	if x != nil {
		return x.Aux12Level
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetAux11Pan() int32 {
	if x != nil {
		return x.Aux11Pan
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetHeatIn() bool {
	if x != nil {
		return x.HeatIn
	}
	return false
}

func (x *DShowInputChannel_InputStrip) GetDrive() int32 {
	if x != nil {
		return x.Drive
	}
	return 0
}

func (x *DShowInputChannel_InputStrip) GetTone() int32 {
	if x != nil {
		return x.Tone
	}
	return 0
}

type DShowInputChannel_MatrixMasterStrip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DShowInputChannel_MatrixMasterStrip) Reset() {
	*x = DShowInputChannel_MatrixMasterStrip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dshow_input_channel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DShowInputChannel_MatrixMasterStrip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DShowInputChannel_MatrixMasterStrip) ProtoMessage() {}

func (x *DShowInputChannel_MatrixMasterStrip) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dshow_input_channel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DShowInputChannel_MatrixMasterStrip.ProtoReflect.Descriptor instead.
func (*DShowInputChannel_MatrixMasterStrip) Descriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 7}
}

type DShowInputChannel_MicLineStrips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HpfIn bool                   `protobuf:"varint,1,opt,name=hpfIn,proto3" json:"hpfIn,omitempty"`
	Hpf   int32                  `protobuf:"varint,2,opt,name=hpf,proto3" json:"hpf,omitempty"`
	EqDyn DShowInputChannelEqDyn `protobuf:"varint,3,opt,name=eqDyn,proto3,enum=proto.DShowInputChannelEqDyn" json:"eqDyn,omitempty"`
	// Comp/Lim
	CompLimIn        bool    `protobuf:"varint,4,opt,name=compLimIn,proto3" json:"compLimIn,omitempty"`
	CompLimThreshold float32 `protobuf:"fixed32,5,opt,name=compLimThreshold,proto3" json:"compLimThreshold,omitempty"`
	CompLimAttack    int32   `protobuf:"varint,6,opt,name=compLimAttack,proto3" json:"compLimAttack,omitempty"`
	CompLimRatio     float32 `protobuf:"fixed32,7,opt,name=compLimRatio,proto3" json:"compLimRatio,omitempty"`
	CompLimRelease   int32   `protobuf:"varint,8,opt,name=compLimRelease,proto3" json:"compLimRelease,omitempty"`
	CompLimKnee      int32   `protobuf:"varint,9,opt,name=compLimKnee,proto3" json:"compLimKnee,omitempty"`
	CompLimGain      float32 `protobuf:"fixed32,10,opt,name=compLimGain,proto3" json:"compLimGain,omitempty"`
	// Exp/Gate
	ExpGateIn        bool    `protobuf:"varint,11,opt,name=expGateIn,proto3" json:"expGateIn,omitempty"`
	ExpGateThreshold float32 `protobuf:"fixed32,12,opt,name=expGateThreshold,proto3" json:"expGateThreshold,omitempty"`
	ExpGateAttack    float32 `protobuf:"fixed32,13,opt,name=expGateAttack,proto3" json:"expGateAttack,omitempty"`
	ExpGateRatio     float32 `protobuf:"fixed32,14,opt,name=expGateRatio,proto3" json:"expGateRatio,omitempty"`
	ExpGateRelease   int32   `protobuf:"varint,15,opt,name=expGateRelease,proto3" json:"expGateRelease,omitempty"`
	ExpGateHold      int32   `protobuf:"varint,16,opt,name=expGateHold,proto3" json:"expGateHold,omitempty"`
	ExpGateRange     float32 `protobuf:"fixed32,17,opt,name=expGateRange,proto3" json:"expGateRange,omitempty"`
	// Exp/Gate Sidechain
	ExpGateSidechainIn bool  `protobuf:"varint,18,opt,name=expGateSidechainIn,proto3" json:"expGateSidechainIn,omitempty"`
	LpfIn              bool  `protobuf:"varint,28,opt,name=lpfIn,proto3" json:"lpfIn,omitempty"`
	Lpf                int32 `protobuf:"varint,29,opt,name=lpf,proto3" json:"lpf,omitempty"`
}

func (x *DShowInputChannel_MicLineStrips) Reset() {
	*x = DShowInputChannel_MicLineStrips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dshow_input_channel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DShowInputChannel_MicLineStrips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DShowInputChannel_MicLineStrips) ProtoMessage() {}

func (x *DShowInputChannel_MicLineStrips) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dshow_input_channel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DShowInputChannel_MicLineStrips.ProtoReflect.Descriptor instead.
func (*DShowInputChannel_MicLineStrips) Descriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 8}
}

func (x *DShowInputChannel_MicLineStrips) GetHpfIn() bool {
	if x != nil {
		return x.HpfIn
	}
	return false
}

func (x *DShowInputChannel_MicLineStrips) GetHpf() int32 {
	if x != nil {
		return x.Hpf
	}
	return 0
}

func (x *DShowInputChannel_MicLineStrips) GetEqDyn() DShowInputChannelEqDyn {
	if x != nil {
		return x.EqDyn
	}
	return DShowInputChannel_EQ_PRE_DYN
}

func (x *DShowInputChannel_MicLineStrips) GetCompLimIn() bool {
	if x != nil {
		return x.CompLimIn
	}
	return false
}

func (x *DShowInputChannel_MicLineStrips) GetCompLimThreshold() float32 {
	if x != nil {
		return x.CompLimThreshold
	}
	return 0
}

func (x *DShowInputChannel_MicLineStrips) GetCompLimAttack() int32 {
	if x != nil {
		return x.CompLimAttack
	}
	return 0
}

func (x *DShowInputChannel_MicLineStrips) GetCompLimRatio() float32 {
	if x != nil {
		return x.CompLimRatio
	}
	return 0
}

func (x *DShowInputChannel_MicLineStrips) GetCompLimRelease() int32 {
	if x != nil {
		return x.CompLimRelease
	}
	return 0
}

func (x *DShowInputChannel_MicLineStrips) GetCompLimKnee() int32 {
	if x != nil {
		return x.CompLimKnee
	}
	return 0
}

func (x *DShowInputChannel_MicLineStrips) GetCompLimGain() float32 {
	if x != nil {
		return x.CompLimGain
	}
	return 0
}

func (x *DShowInputChannel_MicLineStrips) GetExpGateIn() bool {
	if x != nil {
		return x.ExpGateIn
	}
	return false
}

func (x *DShowInputChannel_MicLineStrips) GetExpGateThreshold() float32 {
	if x != nil {
		return x.ExpGateThreshold
	}
	return 0
}

func (x *DShowInputChannel_MicLineStrips) GetExpGateAttack() float32 {
	if x != nil {
		return x.ExpGateAttack
	}
	return 0
}

func (x *DShowInputChannel_MicLineStrips) GetExpGateRatio() float32 {
	if x != nil {
		return x.ExpGateRatio
	}
	return 0
}

func (x *DShowInputChannel_MicLineStrips) GetExpGateRelease() int32 {
	if x != nil {
		return x.ExpGateRelease
	}
	return 0
}

func (x *DShowInputChannel_MicLineStrips) GetExpGateHold() int32 {
	if x != nil {
		return x.ExpGateHold
	}
	return 0
}

func (x *DShowInputChannel_MicLineStrips) GetExpGateRange() float32 {
	if x != nil {
		return x.ExpGateRange
	}
	return 0
}

func (x *DShowInputChannel_MicLineStrips) GetExpGateSidechainIn() bool {
	if x != nil {
		return x.ExpGateSidechainIn
	}
	return false
}

func (x *DShowInputChannel_MicLineStrips) GetLpfIn() bool {
	if x != nil {
		return x.LpfIn
	}
	return false
}

func (x *DShowInputChannel_MicLineStrips) GetLpf() int32 {
	if x != nil {
		return x.Lpf
	}
	return 0
}

type DShowInputChannel_Strip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mute        bool    `protobuf:"varint,1,opt,name=mute,proto3" json:"mute,omitempty"`
	Fader       float32 `protobuf:"fixed32,2,opt,name=fader,proto3" json:"fader,omitempty"`
	ChannelName string  `protobuf:"bytes,3,opt,name=channelName,proto3" json:"channelName,omitempty"`
}

func (x *DShowInputChannel_Strip) Reset() {
	*x = DShowInputChannel_Strip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dshow_input_channel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DShowInputChannel_Strip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DShowInputChannel_Strip) ProtoMessage() {}

func (x *DShowInputChannel_Strip) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dshow_input_channel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DShowInputChannel_Strip.ProtoReflect.Descriptor instead.
func (*DShowInputChannel_Strip) Descriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 9}
}

func (x *DShowInputChannel_Strip) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *DShowInputChannel_Strip) GetFader() float32 {
	if x != nil {
		return x.Fader
	}
	return 0
}

func (x *DShowInputChannel_Strip) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

type DShowInputChannel_StripType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DShowInputChannel_StripType) Reset() {
	*x = DShowInputChannel_StripType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dshow_input_channel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DShowInputChannel_StripType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DShowInputChannel_StripType) ProtoMessage() {}

func (x *DShowInputChannel_StripType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dshow_input_channel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DShowInputChannel_StripType.ProtoReflect.Descriptor instead.
func (*DShowInputChannel_StripType) Descriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 10}
}

// Body
type DShowInputChannel_Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenCount int32 `protobuf:"varint,1,opt,name=tokenCount,proto3" json:"tokenCount,omitempty"` // Old style = 7, new style = 10.
	// Old style.
	AudioStrip       *DShowInputChannel_AudioStrip       `protobuf:"bytes,2,opt,name=audioStrip,proto3" json:"audioStrip,omitempty"`
	AuxBussesOptions *DShowInputChannel_AuxBussesOptions `protobuf:"bytes,3,opt,name=auxBussesOptions,proto3" json:"auxBussesOptions,omitempty"`
	BusConfigMode    *DShowInputChannel_BusConfigMode    `protobuf:"bytes,4,opt,name=busConfigMode,proto3" json:"busConfigMode,omitempty"`
	InputStrip       *DShowInputChannel_InputStrip       `protobuf:"bytes,5,opt,name=inputStrip,proto3" json:"inputStrip,omitempty"`
	MicLineStrips    *DShowInputChannel_MicLineStrips    `protobuf:"bytes,6,opt,name=micLineStrips,proto3" json:"micLineStrips,omitempty"`
	Strip            *DShowInputChannel_Strip            `protobuf:"bytes,7,opt,name=strip,proto3" json:"strip,omitempty"`
	StripType        *DShowInputChannel_StripType        `protobuf:"bytes,8,opt,name=stripType,proto3" json:"stripType,omitempty"`
	// New style.
	AudioMasterStrip  *DShowInputChannel_AudioMasterStrip  `protobuf:"bytes,9,opt,name=audioMasterStrip,proto3" json:"audioMasterStrip,omitempty"`
	AuxBussesOptions2 *DShowInputChannel_AuxBussesOptions2 `protobuf:"bytes,10,opt,name=auxBussesOptions2,proto3" json:"auxBussesOptions2,omitempty"`
	MatrixMasterStrip *DShowInputChannel_MatrixMasterStrip `protobuf:"bytes,11,opt,name=matrixMasterStrip,proto3" json:"matrixMasterStrip,omitempty"`
}

func (x *DShowInputChannel_Body) Reset() {
	*x = DShowInputChannel_Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dshow_input_channel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DShowInputChannel_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DShowInputChannel_Body) ProtoMessage() {}

func (x *DShowInputChannel_Body) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dshow_input_channel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DShowInputChannel_Body.ProtoReflect.Descriptor instead.
func (*DShowInputChannel_Body) Descriptor() ([]byte, []int) {
	return file_proto_dshow_input_channel_proto_rawDescGZIP(), []int{0, 11}
}

func (x *DShowInputChannel_Body) GetTokenCount() int32 {
	if x != nil {
		return x.TokenCount
	}
	return 0
}

func (x *DShowInputChannel_Body) GetAudioStrip() *DShowInputChannel_AudioStrip {
	if x != nil {
		return x.AudioStrip
	}
	return nil
}

func (x *DShowInputChannel_Body) GetAuxBussesOptions() *DShowInputChannel_AuxBussesOptions {
	if x != nil {
		return x.AuxBussesOptions
	}
	return nil
}

func (x *DShowInputChannel_Body) GetBusConfigMode() *DShowInputChannel_BusConfigMode {
	if x != nil {
		return x.BusConfigMode
	}
	return nil
}

func (x *DShowInputChannel_Body) GetInputStrip() *DShowInputChannel_InputStrip {
	if x != nil {
		return x.InputStrip
	}
	return nil
}

func (x *DShowInputChannel_Body) GetMicLineStrips() *DShowInputChannel_MicLineStrips {
	if x != nil {
		return x.MicLineStrips
	}
	return nil
}

func (x *DShowInputChannel_Body) GetStrip() *DShowInputChannel_Strip {
	if x != nil {
		return x.Strip
	}
	return nil
}

func (x *DShowInputChannel_Body) GetStripType() *DShowInputChannel_StripType {
	if x != nil {
		return x.StripType
	}
	return nil
}

func (x *DShowInputChannel_Body) GetAudioMasterStrip() *DShowInputChannel_AudioMasterStrip {
	if x != nil {
		return x.AudioMasterStrip
	}
	return nil
}

func (x *DShowInputChannel_Body) GetAuxBussesOptions2() *DShowInputChannel_AuxBussesOptions2 {
	if x != nil {
		return x.AuxBussesOptions2
	}
	return nil
}

func (x *DShowInputChannel_Body) GetMatrixMasterStrip() *DShowInputChannel_MatrixMasterStrip {
	if x != nil {
		return x.MatrixMasterStrip
	}
	return nil
}

var File_proto_dshow_input_channel_proto protoreflect.FileDescriptor

var file_proto_dshow_input_channel_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x24, 0x0a, 0x11, 0x44, 0x53, 0x68,
	0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x37,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x53,
	0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x96, 0x01, 0x0a, 0x06, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x12, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x70, 0x1a, 0xe6, 0x01, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x74, 0x72, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x75, 0x74,
	0x49, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x75, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x6f,
	0x1a, 0x12, 0x0a, 0x10, 0x41, 0x75, 0x78, 0x42, 0x75, 0x73, 0x73, 0x65, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x13, 0x0a, 0x11, 0x41, 0x75, 0x78, 0x42, 0x75, 0x73, 0x73, 0x65,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x1a, 0x0f, 0x0a, 0x0d, 0x42, 0x75, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0xa1, 0x12, 0x0a, 0x0a, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x61, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x67,
	0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x71, 0x49, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x71, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x61,
	0x6c, 0x6f, 0x67, 0x45, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6e, 0x61,
	0x6c, 0x6f, 0x67, 0x45, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x49,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x49,
	0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x53,
	0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x47, 0x61, 0x69, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x47, 0x61,
	0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x46, 0x72, 0x65, 0x71,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x46, 0x72,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x51, 0x42, 0x77, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x51, 0x42, 0x77,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x4d, 0x69, 0x64, 0x49, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x4d, 0x69, 0x64,
	0x49, 0x6e, 0x12, 0x45, 0x0a, 0x0d, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x4d, 0x69, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x71, 0x48, 0x69,
	0x67, 0x68, 0x4d, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x71, 0x48,
	0x69, 0x67, 0x68, 0x4d, 0x69, 0x64, 0x47, 0x61, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x4d, 0x69, 0x64, 0x47, 0x61, 0x69, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x4d, 0x69, 0x64, 0x46, 0x72, 0x65, 0x71,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x4d, 0x69,
	0x64, 0x46, 0x72, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71, 0x48, 0x69, 0x67, 0x68, 0x4d,
	0x69, 0x64, 0x51, 0x42, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x71, 0x48,
	0x69, 0x67, 0x68, 0x4d, 0x69, 0x64, 0x51, 0x42, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x71, 0x4c,
	0x6f, 0x77, 0x4d, 0x69, 0x64, 0x49, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65,
	0x71, 0x4c, 0x6f, 0x77, 0x4d, 0x69, 0x64, 0x49, 0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x65, 0x71, 0x4c,
	0x6f, 0x77, 0x4d, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x4d, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x4d, 0x69, 0x64, 0x47, 0x61, 0x69, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x4d, 0x69, 0x64, 0x47, 0x61,
	0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x4d, 0x69, 0x64, 0x46, 0x72,
	0x65, 0x71, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x4d,
	0x69, 0x64, 0x46, 0x72, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x4d,
	0x69, 0x64, 0x51, 0x42, 0x77, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x71, 0x4c,
	0x6f, 0x77, 0x4d, 0x69, 0x64, 0x51, 0x42, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x71, 0x4c, 0x6f,
	0x77, 0x49, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x71, 0x4c, 0x6f, 0x77,
	0x49, 0x6e, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x53,
	0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x47, 0x61, 0x69, 0x6e, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x47, 0x61, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x46, 0x72, 0x65, 0x71, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x46, 0x72, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x51, 0x42, 0x77, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x51, 0x42, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x73,
	0x31, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x75, 0x73, 0x31, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x75, 0x73, 0x32, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x75, 0x73,
	0x32, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x73, 0x33, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x62, 0x75, 0x73, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x73, 0x34, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x75, 0x73, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x73,
	0x35, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x75, 0x73, 0x35, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x75, 0x73, 0x36, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x75, 0x73,
	0x36, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x73, 0x37, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x62, 0x75, 0x73, 0x37, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x73, 0x38, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x75, 0x73, 0x38, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x78,
	0x31, 0x49, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x75, 0x78, 0x31, 0x49,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x31, 0x50, 0x72, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x78, 0x31, 0x50, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x75, 0x78, 0x31, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x61, 0x75, 0x78, 0x31, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x78,
	0x32, 0x49, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x75, 0x78, 0x32, 0x49,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x32, 0x50, 0x72, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x78, 0x32, 0x50, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x75, 0x78, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x61, 0x75, 0x78, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x78,
	0x31, 0x50, 0x61, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x75, 0x78, 0x31,
	0x50, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x78, 0x33, 0x49, 0x6e, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x75, 0x78, 0x33, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x75, 0x78, 0x33, 0x50, 0x72, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75,
	0x78, 0x33, 0x50, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x78, 0x33, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x31, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61, 0x75, 0x78, 0x33, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x78, 0x34, 0x49, 0x6e, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x75, 0x78, 0x34, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x75, 0x78, 0x34, 0x50, 0x72, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75,
	0x78, 0x34, 0x50, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x78, 0x34, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61, 0x75, 0x78, 0x34, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x33, 0x50, 0x61, 0x6e, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x75, 0x78, 0x33, 0x50, 0x61, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x75, 0x78, 0x35, 0x49, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x75, 0x78, 0x35, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x35, 0x50, 0x72, 0x65,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x78, 0x35, 0x50, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x75, 0x78, 0x35, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x61, 0x75, 0x78, 0x35, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x75, 0x78, 0x36, 0x49, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x75, 0x78, 0x36, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x36, 0x50, 0x72, 0x65,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x78, 0x36, 0x50, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x75, 0x78, 0x36, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x61, 0x75, 0x78, 0x36, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x75, 0x78, 0x35, 0x50, 0x61, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x61, 0x75, 0x78, 0x35, 0x50, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x78, 0x37, 0x49,
	0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x75, 0x78, 0x37, 0x49, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x37, 0x50, 0x72, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x61, 0x75, 0x78, 0x37, 0x50, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x78,
	0x37, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61, 0x75,
	0x78, 0x37, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x78, 0x38, 0x49,
	0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x75, 0x78, 0x38, 0x49, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x38, 0x50, 0x72, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x61, 0x75, 0x78, 0x38, 0x50, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x78,
	0x38, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x42, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61, 0x75,
	0x78, 0x38, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x37, 0x50,
	0x61, 0x6e, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x75, 0x78, 0x37, 0x50, 0x61,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x78, 0x39, 0x49, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x61, 0x75, 0x78, 0x39, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x78,
	0x39, 0x50, 0x72, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x78, 0x39,
	0x50, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x78, 0x39, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61, 0x75, 0x78, 0x39, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x31, 0x30, 0x49, 0x6e, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x78, 0x31, 0x30, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x75, 0x78, 0x31, 0x30, 0x50, 0x72, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x75, 0x78, 0x31, 0x30, 0x50, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x78, 0x31, 0x30,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x49, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x75, 0x78,
	0x31, 0x30, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x39, 0x50,
	0x61, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x75, 0x78, 0x39, 0x50, 0x61,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x31, 0x31, 0x49, 0x6e, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x78, 0x31, 0x31, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x75, 0x78, 0x31, 0x31, 0x50, 0x72, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x75, 0x78, 0x31, 0x31, 0x50, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x78, 0x31, 0x31,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x75, 0x78,
	0x31, 0x31, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x31, 0x32,
	0x49, 0x6e, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x78, 0x31, 0x32, 0x49,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x78, 0x31, 0x32, 0x50, 0x72, 0x65, 0x18, 0x4f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x78, 0x31, 0x32, 0x50, 0x72, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x75, 0x78, 0x31, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x61, 0x75, 0x78, 0x31, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x75, 0x78, 0x31, 0x31, 0x50, 0x61, 0x6e, 0x18, 0x51, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x75, 0x78, 0x31, 0x31, 0x50, 0x61, 0x6e, 0x12, 0x17, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x74, 0x49, 0x6e, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x65, 0x61, 0x74,
	0x49, 0x6e, 0x12, 0x15, 0x0a, 0x05, 0x64, 0x72, 0x69, 0x76, 0x65, 0x18, 0x89, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x64, 0x72, 0x69, 0x76, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x74, 0x6f, 0x6e,
	0x65, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x1a, 0x13,
	0x0a, 0x11, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x69, 0x70, 0x1a, 0xc7, 0x05, 0x0a, 0x0d, 0x4d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x70, 0x66, 0x49, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x68, 0x70, 0x66, 0x49, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x68,
	0x70, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x68, 0x70, 0x66, 0x12, 0x34, 0x0a,
	0x05, 0x65, 0x71, 0x44, 0x79, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x71, 0x44, 0x79, 0x6e, 0x52, 0x05, 0x65, 0x71,
	0x44, 0x79, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x49, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x49,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x4c, 0x69, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x4c,
	0x69, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x4c,
	0x69, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x4b, 0x6e, 0x65, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x4b, 0x6e, 0x65,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x47, 0x61, 0x69, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x47,
	0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x47, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x78, 0x70, 0x47, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x47, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x65, 0x78, 0x70,
	0x47, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x78, 0x70, 0x47, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x47, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x47, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x47, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x47, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x65, 0x78, 0x70, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x47, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x47, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x47, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x47, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x47, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x65, 0x78, 0x70, 0x47, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x70, 0x66, 0x49, 0x6e, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x70, 0x66, 0x49, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x70, 0x66, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x70, 0x66, 0x1a, 0x53, 0x0a,
	0x05, 0x53, 0x74, 0x72, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x0b, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0xa6, 0x06, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x74, 0x72, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x69,
	0x70, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x70, 0x12, 0x55, 0x0a,
	0x10, 0x61, 0x75, 0x78, 0x42, 0x75, 0x73, 0x73, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x41, 0x75, 0x78, 0x42, 0x75, 0x73, 0x73, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x10, 0x61, 0x75, 0x78, 0x42, 0x75, 0x73, 0x73, 0x65, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x42, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70, 0x52, 0x0a, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70, 0x12, 0x4c, 0x0a, 0x0d, 0x6d, 0x69, 0x63, 0x4c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x70, 0x73, 0x52, 0x0d, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x72, 0x69, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x53, 0x68,
	0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x70, 0x52, 0x05, 0x73, 0x74, 0x72, 0x69, 0x70, 0x12, 0x40, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a,
	0x10, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x69, 0x70, 0x52, 0x10, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x69, 0x70, 0x12, 0x58, 0x0a, 0x11, 0x61, 0x75, 0x78, 0x42, 0x75, 0x73, 0x73, 0x65,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x41, 0x75, 0x78, 0x42, 0x75, 0x73,
	0x73, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x52, 0x11, 0x61, 0x75, 0x78,
	0x42, 0x75, 0x73, 0x73, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x12, 0x58,
	0x0a, 0x11, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x69, 0x70, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x70, 0x22, 0x24, 0x0a, 0x06, 0x65, 0x71, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x51, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x46, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x51, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x10, 0x01, 0x22, 0x28,
	0x0a, 0x05, 0x65, 0x71, 0x44, 0x79, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x51, 0x5f, 0x50, 0x52,
	0x45, 0x5f, 0x44, 0x59, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x51, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x5f, 0x44, 0x59, 0x4e, 0x10, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_dshow_input_channel_proto_rawDescOnce sync.Once
	file_proto_dshow_input_channel_proto_rawDescData = file_proto_dshow_input_channel_proto_rawDesc
)

func file_proto_dshow_input_channel_proto_rawDescGZIP() []byte {
	file_proto_dshow_input_channel_proto_rawDescOnce.Do(func() {
		file_proto_dshow_input_channel_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_dshow_input_channel_proto_rawDescData)
	})
	return file_proto_dshow_input_channel_proto_rawDescData
}

var file_proto_dshow_input_channel_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_dshow_input_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_dshow_input_channel_proto_goTypes = []interface{}{
	(DShowInputChannelEqType)(0),                // 0: proto.DShowInputChannel.eqType
	(DShowInputChannelEqDyn)(0),                 // 1: proto.DShowInputChannel.eqDyn
	(*DShowInputChannel)(nil),                   // 2: proto.DShowInputChannel
	(*DShowInputChannel_Header)(nil),            // 3: proto.DShowInputChannel.Header
	(*DShowInputChannel_AudioMasterStrip)(nil),  // 4: proto.DShowInputChannel.AudioMasterStrip
	(*DShowInputChannel_AudioStrip)(nil),        // 5: proto.DShowInputChannel.AudioStrip
	(*DShowInputChannel_AuxBussesOptions)(nil),  // 6: proto.DShowInputChannel.AuxBussesOptions
	(*DShowInputChannel_AuxBussesOptions2)(nil), // 7: proto.DShowInputChannel.AuxBussesOptions2
	(*DShowInputChannel_BusConfigMode)(nil),     // 8: proto.DShowInputChannel.BusConfigMode
	(*DShowInputChannel_InputStrip)(nil),        // 9: proto.DShowInputChannel.InputStrip
	(*DShowInputChannel_MatrixMasterStrip)(nil), // 10: proto.DShowInputChannel.MatrixMasterStrip
	(*DShowInputChannel_MicLineStrips)(nil),     // 11: proto.DShowInputChannel.MicLineStrips
	(*DShowInputChannel_Strip)(nil),             // 12: proto.DShowInputChannel.Strip
	(*DShowInputChannel_StripType)(nil),         // 13: proto.DShowInputChannel.StripType
	(*DShowInputChannel_Body)(nil),              // 14: proto.DShowInputChannel.Body
}
var file_proto_dshow_input_channel_proto_depIdxs = []int32{
	3,  // 0: proto.DShowInputChannel.header:type_name -> proto.DShowInputChannel.Header
	14, // 1: proto.DShowInputChannel.body:type_name -> proto.DShowInputChannel.Body
	0,  // 2: proto.DShowInputChannel.InputStrip.eqHighType:type_name -> proto.DShowInputChannel.eqType
	0,  // 3: proto.DShowInputChannel.InputStrip.eqHighMidType:type_name -> proto.DShowInputChannel.eqType
	0,  // 4: proto.DShowInputChannel.InputStrip.eqLowMidType:type_name -> proto.DShowInputChannel.eqType
	0,  // 5: proto.DShowInputChannel.InputStrip.eqLowType:type_name -> proto.DShowInputChannel.eqType
	1,  // 6: proto.DShowInputChannel.MicLineStrips.eqDyn:type_name -> proto.DShowInputChannel.eqDyn
	5,  // 7: proto.DShowInputChannel.Body.audioStrip:type_name -> proto.DShowInputChannel.AudioStrip
	6,  // 8: proto.DShowInputChannel.Body.auxBussesOptions:type_name -> proto.DShowInputChannel.AuxBussesOptions
	8,  // 9: proto.DShowInputChannel.Body.busConfigMode:type_name -> proto.DShowInputChannel.BusConfigMode
	9,  // 10: proto.DShowInputChannel.Body.inputStrip:type_name -> proto.DShowInputChannel.InputStrip
	11, // 11: proto.DShowInputChannel.Body.micLineStrips:type_name -> proto.DShowInputChannel.MicLineStrips
	12, // 12: proto.DShowInputChannel.Body.strip:type_name -> proto.DShowInputChannel.Strip
	13, // 13: proto.DShowInputChannel.Body.stripType:type_name -> proto.DShowInputChannel.StripType
	4,  // 14: proto.DShowInputChannel.Body.audioMasterStrip:type_name -> proto.DShowInputChannel.AudioMasterStrip
	7,  // 15: proto.DShowInputChannel.Body.auxBussesOptions2:type_name -> proto.DShowInputChannel.AuxBussesOptions2
	10, // 16: proto.DShowInputChannel.Body.matrixMasterStrip:type_name -> proto.DShowInputChannel.MatrixMasterStrip
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_proto_dshow_input_channel_proto_init() }
func file_proto_dshow_input_channel_proto_init() {
	if File_proto_dshow_input_channel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_dshow_input_channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DShowInputChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dshow_input_channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DShowInputChannel_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dshow_input_channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DShowInputChannel_AudioMasterStrip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dshow_input_channel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DShowInputChannel_AudioStrip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dshow_input_channel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DShowInputChannel_AuxBussesOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dshow_input_channel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DShowInputChannel_AuxBussesOptions2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dshow_input_channel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DShowInputChannel_BusConfigMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dshow_input_channel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DShowInputChannel_InputStrip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dshow_input_channel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DShowInputChannel_MatrixMasterStrip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dshow_input_channel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DShowInputChannel_MicLineStrips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dshow_input_channel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DShowInputChannel_Strip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dshow_input_channel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DShowInputChannel_StripType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dshow_input_channel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DShowInputChannel_Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_dshow_input_channel_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_dshow_input_channel_proto_goTypes,
		DependencyIndexes: file_proto_dshow_input_channel_proto_depIdxs,
		EnumInfos:         file_proto_dshow_input_channel_proto_enumTypes,
		MessageInfos:      file_proto_dshow_input_channel_proto_msgTypes,
	}.Build()
	File_proto_dshow_input_channel_proto = out.File
	file_proto_dshow_input_channel_proto_rawDesc = nil
	file_proto_dshow_input_channel_proto_goTypes = nil
	file_proto_dshow_input_channel_proto_depIdxs = nil
}
